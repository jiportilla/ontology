# !/usr/bin/env python
# -*- coding: UTF-8 -*-


from typing import Union

import pandas as pd
from pandas import DataFrame

from base import BaseObject
from datadict import FindCertifications
from datamongo import CendantTag


class CertificationIndividualReport(BaseObject):
    """
    Purpose:
    Service that finds data on Self-Reported Certifications in user CVs and HR data
    and reports findings on an individual (Serial Number by Serial Number) level.

    Sample Output:
    +----+-------------------------------------------------+----------------+----------------+
    |    | Certification                                   | SerialNumber   | Vendor         |
    |----+-------------------------------------------------+----------------+----------------|
    |  0 | ITIL Certification                              | 123456         | Axelos         |
    |  1 | ITIL Foundation Certification                   | 227232         | Axelos         |
    |  2 | IBM Certification                               | 9483223        | IBM            |
    |  3 | CCNA Certification                              | 9483223        | Cisco          |
    |  4 | Java Certification                              | 9483223        | Oracle         |
    |  5 | Project Management Professional                 | 923823         | Oracle         |
    |  6 | Level 3 Certification                           | 009238323      | IBM            |
    |  7 | CCNA Security                                   | 009238323      | Cisco          |
    |  8 | Microsoft Certification                         | 2371221        | Microsoft      |
    +----+-------------------------------------------------+----------------+----------------+

    Traceability:
    https://github.ibm.com/GTS-CDO/unstructured-analytics/issues/617#issuecomment-13692707

    Prereq:
    a populated "Supply_Tag_***" collection (e.g., 'supply_tag_20190801')
    """

    def __init__(self,
                 collection: CendantTag,
                 is_debug: bool = False):
        """
        Created:
            5-Aug-2019
            craig.trim@ibm.com
        Updated:
            22-Aug-2019
            craig.trim@ibm.com
            *   update feedback to incorporate confidence levels
                https://github.ibm.com/-cdo/unstructured-analytics/issues/810
        Purpose:
            Execute the Report to find "Self-Reported Certifications"
        :param collection:
            the instantiated mongoDB collection from which to query data
        :return:
            a pandas DataFrame with the results
        :param is_debug:
            if True     increase log output at DEBUG level
        """
        BaseObject.__init__(self, __name__)

        self._is_debug = is_debug
        self._collection = collection
        self._cert_finder = FindCertifications()

    def _cert_frequency(self) -> list:
        """
        Purpose:
            A record is a list of tag tuples generated by the annotation model
            Tag Tuples have this format:
                (Tag, 100)
            the first value is the tag name
            the second value is the tag confidence level
        :return:
        """
        results = []

        for chunk in self._collection.collection.by_chunks():
            for record in chunk:
                key_field = record["key_field"]
                if not key_field or not len(key_field):
                    raise ValueError(f"Serial Number Not Found")

                fields = [field for field in record["fields"]
                          if field["type"] == "long-text"]

                for field in fields:

                    def _normalized():
                        if 'normalized' in field:
                            if len(field['normalized']):
                                return field['normalized'][0].replace(',', ' ')
                        return ''

                    def _original():
                        if 'value' in field:
                            if len(field['value']):
                                return field['value'][0].replace(',', ' ')
                        return ''

                    tag_tuples = [tag_tuple for tag_tuple in field["tags"]["supervised"]
                                  if self._cert_finder.exists(tag_tuple[0])]

                    for tag_tuple in tag_tuples:
                        vendor = self._cert_finder.vendor_by_certification(tag_tuple[0], normalize=False)
                        certification = self._cert_finder.certification_label(tag_tuple[0])

                        def _confidence() -> float:
                            x = round(tag_tuple[1], 1)
                            if x > 100:
                                return 100.0
                            if x < 0:
                                return 0.0
                            return x

                        results.append({
                            "SerialNumber": key_field,
                            "FieldId": field["field_id"],
                            "Certification": certification,
                            "Confidence": _confidence(),
                            "Original": _original(),
                            "Normalized": _normalized(),
                            "Vendor": vendor})

        return results

    def process(self) -> Union[DataFrame, None]:

        if not self._collection.collection.count():
            self.logger.warning(f"No Records Found: "
                                f"{self._collection.collection.log()}")
            return None

        results = self._cert_frequency()
        return pd.DataFrame(results)
